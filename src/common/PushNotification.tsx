import PushNotificationIOS from '@react-native-community/push-notification-ios';
//@ts-ignore
import PushNotification from 'react-native-push-notification';
import {NOTIFY} from '../constants/constant';
import {navigate} from '../navigation/RootNavigation';
// import store from 'store';
import {SCREENS_KEY} from '../navigation/preset';

export function createDefaultChannels() {
  PushNotification.createChannel(
    {
      channelId: 'default-channel-id', // (required)
      channelName: 'Default channel', // (required)
      channelDescription: 'A default channel', // (optional) default: undefined.
      soundName: 'default', // (optional) See `soundName` parameter of `localNotification` function
      importance: 4, // (optional) default: 4. Int value of the Android notification importance
      vibrate: true, // (optional) default: true. Creates the default vibration patten if true.
    },
    created =>
      console.log(`createChannel 'default-channel-id' returned '${created}'`), // (optional) callback returns whether the channel was created, false means it already existed.
  );

  PushNotification.createChannel(
    {
      channelId: 'sound-channel-id', // (required)
      channelName: 'Sound channel', // (required)
      channelDescription: 'A sound channel', // (optional) default: undefined.
      soundName: 'sample.mp3', // (optional) See `soundName` parameter of `localNotification` function
      importance: 4, // (optional) default: 4. Int value of the Android notification importance
      vibrate: true, // (optional) default: true. Creates the default vibration patten if true.
    },
    created =>
      console.log(`createChannel 'sound-channel-id' returned '${created}'`), // (optional) callback returns whether the channel was created, false means it already existed.
  );
}

export function localNotify({
  lastId,
  title,
  body,
  data,
  subText,
  group,
  soundName,
}) {
  console.log({title}, {body}, {data});
  if (title && body) {
    lastId.current++;
    PushNotification.localNotification({
      /* Android Only Properties */
      channelId: soundName ? 'sound-channel-id' : 'default-channel-id',
      ticker: 'My Notification Ticker', // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
      smallIcon: 'ic_launcher', // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: body, // (optional) default: "message" prop
      subText: subText, // (optional) default: none
      // color: 'red', // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      // tag: 'some_tag', // (optional) add tag to message
      group: group, // (optional) add group to message
      groupSummary: false, // (optional) set this notification to be the group summary for a group of notifications, default: false
      ongoing: false, // (optional) set whether this is an "ongoing" notification
      // actions: ['Yes', 'No'], // (Android only) See the doc for notification actions to know more
      invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true

      when: null, // (optional) Add a timestamp pertaining to the notification (usually the time the event occurred). For apps targeting Build.VERSION_CODES.N and above, this time is not shown anymore by default and must be opted into by using `showWhen`, default: null.
      usesChronometer: false, // (optional) Show the `when` field as a stopwatch. Instead of presenting `when` as a timestamp, the notification will show an automatically updating display of the minutes and seconds since when. Useful when showing an elapsed time (like an ongoing phone call), default: false.
      timeoutAfter: null, // (optional) Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled, default: null

      /* iOS only properties */
      alertAction: 'view', // (optional) default: view
      category: '', // (optional) default: empty string

      /* iOS and Android properties */
      id: lastId.current, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      title: title, // (optional)
      message: body,
      userInfo: data, // (optional) default: {} (using null throws a JSON value '<null>' error)
      // playSound: !!soundName, // (optional) default: true
      soundName: soundName ? soundName : 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      //   number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
    });
  }
}

//-----------------------------------------------------------------------------------------------
export function onForegroundOpened({key, ...data}) {
  switch (key) {
    case NOTIFY.MESSAGE:
      navigate('MessageStack', {
        screen: SCREENS_KEY.MESSAGE.INDEX,
        params: {
          roomId: data.roomId,
        },
      });
      break;

    default:
      break;
  }
}

//--------------------------------------------------------------------------------------------

export function onNotificationOpened({key, ...data}) {
  switch (key) {
    case NOTIFY.MESSAGE:
      navigate('MessageStack', {
        screen: SCREENS_KEY.MESSAGE.INDEX,
        params: {
          roomId: data.roomId,
        },
      });
      break;

    default:
      break;
  }
}

//-----------------------------------------------------------------------------------------
// export function onBackgroundHandle({key, ...data}) {
//   switch (key) {
//     case NOTIFY.MESSAGE:
//       store.dispatch(setNewMessage(JSON.stringify(data)));
//       break;
//     default:
//       break;
//   }
// }

PushNotification.configure({
  // (required) Called when a remote or local notification is opened or received
  onNotification: notification => {
    console.log('NOTIFICATION:', notification);

    const {foreground, userInteraction, data, title, message} = notification;

    data.title = title;
    data.message = message;

    // process the notification
    //--------------Opened notification foreground------------------------------------------
    if (foreground && userInteraction) {
      //Foreground
      onForegroundOpened(data);
    }
    //-----------Opened notification not foreground-----------------------------------------
    if (!foreground && userInteraction) {
      //onNotificationOpened
      onNotificationOpened(data);
    }
    //------Background handle-------------------------------------------------------------
    // if (!foreground && !userInteraction) {
    //   onBackgroundHandle(data);
    // }

    // (required) Called when a remote is received or opened, or local notification is opened
    notification.finish(PushNotificationIOS.FetchResult.NoData);
  },
  // (optional) Called when the user fails to register for remote notifications. Typically occurs when APNS is having issues, or the device is a simulator. (iOS)
  onRegistrationError: () => {},
  // IOS ONLY (optional): default: all - Permissions to register.
  permissions: {
    alert: true,
    badge: true,
    sound: true,
  },
  // Should the initial notification be popped automatically
  // default: true
  popInitialNotification: false,
  /**
   * (optional) default: true
   * - Specified if permissions (ios) and token (android and ios) will requested or not,
   * - if not, you must call PushNotificationsHandler.requestPermissions() later
   */
  requestPermissions: true,
});
